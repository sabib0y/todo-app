{"version":3,"sources":["EmptyItem.js","ListItems.js","App.js","serviceWorker.js","index.js"],"names":["EmptyItem","inputRef","React","createRef","handleClick","inputVal","_this","current","value","props","addItem","updateInputState","focus","passValue","react_default","a","createElement","className","type","placeholder","ref","this","inputState","onChange","onClick","index_es","icon","faArrowAltCircleUp","Component","ListItems","triggerChange","e","handleInputChange","index","concat","items","isActive","faBars","dateTime","handleChange","checked","faCheck","item","removeItem","faTimes","App","state","data","setState","Object","toConsumableArray","Date","now","parseFloat","target","forEach","listItem","console","log","parsedIndex","splice","_this2","keys","map","key","i","src_ListItems","bind","src_EmptyItem","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4211d9f0.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {faArrowAltCircleUp} from \"@fortawesome/free-solid-svg-icons\";\n\nclass EmptyItem extends Component {\n    inputRef = React.createRef();\n\n    handleClick = () => {\n        let inputVal = this.inputRef.current.value;\n        if(inputVal){\n            this.props.addItem(inputVal)\n        }\n        this.props.updateInputState('');\n        this.inputRef.current.value = '';\n        this.inputRef.current.focus();\n    };\n\n    passValue = () => {\n        this.props.updateInputState(this.inputRef.current.value);\n    };\n\n    render() {\n    return (\n      <div className=\"empty input-block\">\n        <div className=\"item-wrapper\">\n            <span className=\"fake-checkbox\"></span>\n            <div>\n                <input\n                    type=\"text\"\n                    placeholder=\"next item\"\n                    ref={this.inputRef}\n                    value={this.props.inputState}\n                    onChange={this.passValue}\n                />\n                <span className=\"add\" onClick={this.handleClick}>\n                    <FontAwesomeIcon icon={faArrowAltCircleUp} />\n                </span>\n            </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default EmptyItem;\n","import React, { Component } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {faBars, faCheck, faTimes} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nclass ListItems extends Component {\r\n    triggerChange = (e) => {\r\n        this.props.handleInputChange(e, this.props.index);\r\n    };\r\n\r\n\r\n  render() {\r\n      return (\r\n          <div className={`${this.props.items.isActive ? 'checked' : ''} input-block`}>\r\n              <div className=\"item-wrapper\">\r\n                  <span className=\"draggable\">\r\n                      <FontAwesomeIcon icon={faBars} />\r\n                  </span>\r\n\r\n                  <div className=\"field-wrapper\">\r\n                  <span className=\"checkbox\">\r\n                      <input\r\n                          type=\"checkbox\"\r\n                          value={this.props.items.dateTime}\r\n                          onChange={this.props.handleChange}\r\n                          checked={this.props.items.isActive ? 'checked' : ''}\r\n                      />\r\n                      <span className=\"fake-box\">\r\n                          <FontAwesomeIcon icon={faCheck} />\r\n                      </span>\r\n                  </span>\r\n\r\n                      < input\r\n                          type='text'\r\n                          className=\"item\"\r\n                          onChange={this.triggerChange}\r\n                          value={this.props.items.item}\r\n                      />\r\n                      <button\r\n                          className=\"remove\"\r\n                          onClick={this.props.removeItem}\r\n                      >\r\n                          <FontAwesomeIcon icon={faTimes} />\r\n                      </button>\r\n                  </div>\r\n              </div>\r\n          </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default ListItems;\r\n","import React, { Component } from 'react';\r\nimport './App.scss';\r\nimport EmptyItem from './EmptyItem';\r\nimport ListItems from './ListItems';\r\n\r\n\r\nclass App extends Component {\r\n  state = {\r\n    data: [],\r\n    inputState:'',\r\n  };\r\n\r\n  addItem = (item) => {\r\n    const { data } = this.state;\r\n    // update state\r\n    this.setState({\r\n      data: [...data, {\r\n        item: item,\r\n        dateTime: Date.now(),\r\n        isActive: false}],\r\n    });\r\n  };\r\n\r\n  updateInputState = (value) => {\r\n    this.setState({inputState: value});\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    const value = parseFloat(e.target.value);\r\n    const data = [...this.state.data];\r\n    data.forEach(listItem => {\r\n      if(listItem.dateTime === value)\r\n        listItem.isActive = !listItem.isActive;\r\n    });\r\n    this.setState({data: [...data] });\r\n  };\r\n\r\n  handleInputChange = (e, index) => {\r\n    const value = e.target.value;\r\n    const data = [...this.state.data];\r\n    data[index].item = value;\r\n    this.setState({data: [...data] });\r\n    console.log(data);\r\n  };\r\n\r\n  removeItem(item){\r\n    const parsedIndex = parseFloat(item);\r\n    // backup state\r\n    const data = [...this.state.data];\r\n    // //fix issue\r\n    if(parsedIndex !== -1){\r\n      data.splice(parsedIndex, 1);\r\n    }\r\n    // update state\r\n    this.setState({data: [...data] });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"note-wrapper\">\r\n          <div className=\"inner-wrapper\">\r\n\r\n          <header className=\"App-header\">\r\n            <h1>Todo app!</h1>\r\n          </header>\r\n          <div className=\"container\">\r\n            {Object.keys(this.state.data).map((key, i) => (\r\n                <ListItems\r\n                    removeItem={this.removeItem.bind(this)}\r\n                    key={key}\r\n                    index={key}\r\n                    items={this.state.data[i]}\r\n                    handleChange={this.handleChange}\r\n                    handleInputChange={this.handleInputChange}\r\n                />\r\n              ))\r\n            }\r\n\r\n            <EmptyItem\r\n                addItem={this.addItem}\r\n                value={this.state.inputState}\r\n                updateInputState={this.updateInputState}\r\n            />\r\n          </div>\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport './fontawesome'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n\n// // const { data } = this.state;\n// // copy state\n// const data = {...this.state.data}\n// // edit copy\n//\n// // update state\n// this.setState({\n//     data: {\n//         item: item,\n//         dateTime: Date.now()\n//     }\n// });\n//\n// this.updateList();\n// // this.setState({...data, {item} })\n\n\n// copy state\n// const data = {...this.state.data}\n// // edit copy\n// data[`item`] = item;\n// // update state\n// this.setState({data});\n// this.updateList();"],"sourceRoot":""}